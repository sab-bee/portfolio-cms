---
import { renderRichText, storyblokEditable } from "@storyblok/astro";

const { blok } = Astro.props;
const renderPost = renderRichText(blok.post);
---

<div
  {...storyblokEditable(blok)}
  class="project grid justify-center items-center cursor-pointer hover:bg-shade p-6 transition-colors select-none"
>
  <img
    class="h-[200px] w-[300px] object-cover rounded-xl mx-auto"
    src={blok?.banner?.filename}
    alt=""
  />
  <p class="font-medium">{blok.name}</p>

  <div class="modal-wraper hide">
    <div class="modal">
      <div class="inner" set:html={renderPost} />
      <button class="modal-close text-2xl">+</button>
    </div>
  </div>
</div>

<style>
  .modal-wraper {
    width: 100vw;
    height: 100vh;
    background: rgba(255, 255, 255, 0.337);
    backdrop-filter: blur(4px);
    position: fixed;
    top: 0;
    left: 0;
    animation: animateWraper 0.2s ease-out;
  }

  @keyframes animateWraper {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  .modal {
    width: 65%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: var(--colorPrimary);
    border: 1px solid black;
    border-radius: 15px;
    padding: 5rem 2rem 2rem 2rem;
    animation: animateModal 0.3s ease-out;
    transform-origin: 0% 0%;
  }

  .modal .inner {
    width: 100%;
    height: 80vh;
    overflow-y: auto;
    overscroll-behavior: contain;
  }

  @keyframes animateModal {
    from {
      transform: scale(0.5) translate(-50%, -50%);
    }
    to {
      transform: scale(1) translate(-50%, -50%);
    }
  }

  .hide {
    display: none;
  }

  .modal button {
    transform: rotate(45deg);
    background: rgb(0, 0, 0);
    color: white;
    width: 40px;
    height: 40px;
    border-radius: 100%;
    position: absolute;
    right: 1rem;
    top: 1rem;
  }

  .inner::-webkit-scrollbar {
    width: 6px;
  }

  .inner::-webkit-scrollbar-track {
    /* box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); */
  }

  .inner::-webkit-scrollbar-thumb {
    background-color: rgb(199, 180, 164);
    border-radius: 100px;
  }

  .borderX {
    border-inline: 1px solid black;
  }

  .borderBot {
    border-bottom: 1px solid black;
  }

  @media only screen and (max-width: 768px) {
    .modal {
      width: 90%;
    }
  }
</style>

<script>
  const projects = document.querySelectorAll(".project");
  const modals = document.querySelectorAll(".modal-wraper");
  const closeBtns = document.querySelectorAll(".modal-close");

  projects.forEach((project, i) => {
    project.addEventListener("click", (e) => {
      modals.forEach((modal) => {
        modal.classList.add("hide");
      });
      modals[i].classList.remove("hide");
      closeBtns.forEach((btn) => {
        btn.addEventListener("click", (e) => {
          e.stopPropagation();
          modals[i].classList.add("hide");
        });
      });
    });
  });

  for (let i = 1; i < projects.length; i += 3) {
    projects[i].classList.add("borderX");
  }

  for (let i = 0; i <= projects.length - 3; i++) {
    projects[i].classList.add("borderBot");
  }
</script>
